package io.github.maciejlagowski.jarmodifier.service.decompiler;

import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import static io.github.maciejlagowski.jarmodifier.util.StringBytesConverter.getStringFromBytes;

public class DecompilerService {

    private static DecompilerService instance;
    private boolean wasDecompiled = false;
    private String path;

    private DecompilerService() {
    }

    public static DecompilerService getInstance() {
        if (instance == null) {
            instance = new DecompilerService();
        }
        return instance;
    }

    public boolean wasDecompiled() {
        return wasDecompiled;
    }

    public void decompile(String path) {
        Decompiler.decompile(path);
        this.path = path;
        wasDecompiled = true;
    }

    public void deleteDecompiledFile() {
        // TODO
        // should delete new classes also (generated by javaassist)
    }

    public String getDecompiledClassCode(String entryName, String jarName) throws Exception {
        ZipFile zip = new ZipFile("decompiled/" + jarName + ".jar");
        ZipEntry entry = zip.getEntry(entryName.replaceAll("\\.", "/") + ".java");
        return getStringFromBytes(zip.getInputStream(entry).readAllBytes());
    }

    public String getDecompiledClassCode(String entryName) {
        if (wasDecompiled) {
            entryName = entryName.replace(".class", ".java");
            try {
                return getDecompiledClassCode(entryName, path.replaceAll(".*/", "").replace(".jar", ""));
            } catch (Exception e) {
                return "Cannot decompile class " + entryName;
            }
        } else {
            return "Jar was not decompiled yet.";
        }
    }
}
